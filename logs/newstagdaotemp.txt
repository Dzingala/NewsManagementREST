package by.epam.lab.task1.dao.impl;


import by.epam.lab.task1.dao.NewsTagDAO;
import by.epam.lab.task1.exceptions.DAOException;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.TreeMap;

@Component
public class JdbcNewsTagDAO implements NewsTagDAO{
    private final static Logger logger= Logger.getLogger(JdbcNewsTagDAO.class);
    private final static String CREATE_NEWS_TAG_QUERY="INSERT INTO DZINHALA.NEWS_TAG(NEWS_ID,TAG_ID) VALUES (?,?)";
    private final static String READ_TAGS_BY_NEWS_QUERY="SELECT * FROM DZINHALA.NEWS_TAG WHERE NEWS_ID=?";
    private final static String UPDATE_TAG_NEWS_QUERY="UPDATE DZINHALA.NEWS_TAG SET NEWS_ID=? WHERE TAG_ID=?";//changes news for existing tags(redirects tag)
    private final static String DELETE_NEWS_TAGS_QUERY="DELETE FROM DZINHALA.NEWS_TAG WHERE NEWS_ID=?";//deletes all tags of a certain news
    private final static String DELETE_NEWS_TAG_QUERY="DELETE FROM DZINHALA.NEWS_TAG WHERE TAG_ID=?";//deletes 1 row ( 1 tag for an existing news)

    private final static String CHECK_TAGS_AMOUNT_QUERY="SELECT COUNT(NEWS_ID) FROM DZINHALA.NEWS_TAG WHERE TAG_ID=?";//counts the news amount assigned to the certain tag
    private final static String READ_ALL_QUERY="SELECT * FROM DZINHALA.NEWS_TAG";

    @Autowired
    private DataSource dataSource;

    @Override
    public Long create(Object o) throws DAOException {
        return null;
    }

    @Override
    public Object read(long id) {
        return null;
    }

    @Override
    public long update(Object o) {
        return 0;
    }

    @Override
    public boolean delete(long id) {
        return false;
    }

    @Override
    public ArrayList readAll() {
        return null;
    }

    /*@Override
    public TreeMap<Long,Long> readAll() {
        logger.debug("Getting the map of attached to a tag's id news' id in NewsTagDAO");
        TreeMap<Long,Long> tag_news = null;//the key is tag's id, value - news' id
        //it means that "tag id=KEY is attached to a news id=VALUE
        Connection conn=null;
        try{
            conn=dataSource.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(READ_ALL_QUERY);
            tag_news=new TreeMap<Long, Long>();
            while(rs.next()){
                tag_news.put(
                        rs.getLong("TAG_ID"),
                        rs.getLong("NEWS_ID")
                );
            }
        } catch (SQLException e) {
            logger.error("SQLException while getting the map of tags' news");
            throw new RuntimeException();
        }
        return tag_news;
    }
*/
    public boolean checkTagNewsAmount(long tagId){
        logger.debug("Checking the amount of tags in NewsTagDAO");
        Connection conn = null;
        long count;
        try {
            conn = dataSource.getConnection();
            PreparedStatement ps = conn.prepareStatement(CHECK_TAGS_AMOUNT_QUERY);
            ps.setLong(1, tagId);
            ResultSet rs=ps.executeQuery();
            if(rs.next()){
                count=rs.getLong(1);
                logger.debug("the number of authors for this news: "+count);
                if(count>=1){
                    return false;
                }
            }
            ps.close();
        } catch (SQLException e) {
            logger.error("SQLException while checking amount of news assigned for a tag");
            throw new RuntimeException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    logger.debug("SQLException while closing connection");
                }
            }
        }
        return true;
    }

    @Override
    public boolean createNewsTag(long newsId, long tagId, ApplicationContext context) {
        logger.debug("Creating news tag in NewsTagDAO");
        JdbcNewsDAO newsDAO = context.getBean(JdbcNewsDAO.class);//for checking either given news and author exist or not
        if(newsDAO.readNewsById(1)!=null) {
            logger.debug("News id="+newsId+" exist");
            JdbcTagDAO tagDAO=context.getBean(JdbcTagDAO.class);
            if(tagDAO.readTagById(tagId)!=null) {
                logger.debug("Tag id="+tagId+" exists");
                if(checkTagNewsAmount(tagId)) {

                    Connection conn = null;
                    try {
                        conn = dataSource.getConnection();
                        PreparedStatement ps = conn.prepareStatement(CREATE_NEWS_TAG_QUERY);
                        ps.setLong(1, newsId);
                        ps.setLong(2, tagId);
                        ps.executeUpdate();
                        ps.close();
                    } catch (SQLException e) {
                        logger.error("SQLException while creating news tag");
                        throw new RuntimeException(e);
                    } finally {
                        if (conn != null) {
                            try {
                                conn.close();
                            } catch (SQLException e) {
                                logger.debug("SQLException while closing connection");
                            }
                        }
                    }
                }else{
                    logger.debug("Tag id="+tagId+" already have the news it is assigned to");
                    return false;
                }
            }else{
                logger.debug("Tag id="+tagId+" do not exist");
                return false;
            }
        }else{
            logger.debug("News id="+newsId+" do not exist");
            return false;
        }
        return true;
    }

    @Override
    public ArrayList<Long> readTagIdsByNewsId(long newsId) {
        logger.debug("Reading news' tags in NewsTagDAO");
        ArrayList<Long> newsTags=null;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            PreparedStatement ps = conn.prepareStatement(READ_TAGS_BY_NEWS_QUERY);
            ps.setLong(1, newsId);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                newsTags=new ArrayList<Long>();
                newsTags.add(rs.getLong("TAG_ID"));
                while(rs.next()){
                    newsTags.add(rs.getLong("TAG_ID"));
                }
            }
            else{
                logger.debug("News id="+newsId+" do not exist");
            }
            ps.close();

        } catch (SQLException e) {
            logger.error("SQLException while reading tags");
            throw new RuntimeException(e);

        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    logger.error("SQLException while closing connection");
                }
            }
        }
        return newsTags;
    }

    @Override
    public boolean updateTagsNewsId(long tagId, long newNewsId) {//sets new news' id for an existing tag
        logger.debug("Updating tags' news in NewsTagDAO");
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            if(readTagIdsByNewsId(newNewsId)!=null) {
                PreparedStatement ps = conn.prepareStatement(UPDATE_TAG_NEWS_QUERY);
                ps.setLong(1, newNewsId);
                ps.setLong(2, tagId);
                ps.executeUpdate();
                ps.close();
            }else{
                logger.debug("News with id="+newNewsId+" do not have any tags.");
                return false;
            }
        } catch (SQLException e) {
            logger.error("SQLException while updating tags' news");
            throw new RuntimeException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    logger.error("SQLException while closing connection");
                }
            }
        }
        return true;
    }

    @Override
    public boolean deleteTagsNews(long tagId) {//deletes 1 tag of a news
        logger.debug("Deleting a tag id="+tagId+" of existing news in NewsTagDAO");
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            PreparedStatement ps = conn.prepareStatement(DELETE_NEWS_TAG_QUERY);
            ps.setLong(1, tagId);
            ps.executeUpdate();
            ps.close();
        } catch (SQLException e) {
            logger.error("SQLException while deleting news tag");
            throw new RuntimeException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    logger.error("SQLException while closing connection");
                }
            }
        }
        return true;
    }

    @Override
    public boolean deleteNewsTags(long newsId) {//deletes all tags of a certain news
        logger.debug("Deleting all tags of a news id="+newsId+" in NewsTagDAO");
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            PreparedStatement ps = conn.prepareStatement(DELETE_NEWS_TAGS_QUERY);
            ps.setLong(1, newsId);
            ps.executeUpdate();
            ps.close();
        } catch (SQLException e) {
            logger.error("SQLException while deleting news tags");
            throw new RuntimeException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    logger.error("SQLException while closing connection");
                }
            }
        }
        return true;
    }

}
